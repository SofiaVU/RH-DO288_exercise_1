// Ejmplos Sancho
// https://github.com/dsanchor/demo-cicd
//
pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 60, unit: 'MINUTES')
    }
    agent {
      node {
        //TODO: Add label for the Maven jenkins agent
        label 'maven'
      }
    }

    environment {
        //TODO: Customize these variables for your environment
        DEV_PROJECT = "svidal-dev"
        STAGE_PROJECT = "svidlaur-stage"
        PRODUCTION_PROJECT = "svidlaur-prod"
        APP_GIT_URL = "https://github.com/SofiaVU/RH-DO288_exercise_1"
        NEXUS_SERVER = "http://app-nexus-svidalur-cicd.apps.cluster461nov2.sandbox1543.opentlc.com/repository/maven-public/"

        // working directory
        APP_NAME = "app"

        // Env variable to pass to the app
        APP_MSG = "Sofia"
    }


    stages {

        stage('Compilation Check') {
            steps {
                echo '### Checking for compile errors ###'
                sh '''
                        cd ${APP_NAME}
                        mvn -s settings.xml -B clean compile
                   '''
            }
        }

        // UNIT TEST
        stage('Run Unit Tests') {
            steps {
                echo '### Running unit tests ###'
                sh '''
                        cd ${APP_NAME}
                        mvn -s settings.xml -B clean test
                   '''
            }
        }

        stage('Create fat JAR') {
            steps {
                echo '### Creating fat JAR ###'
                //sh '''
                //        cd ${APP_NAME}
                //        mvn -s settings.xml -B clean package -DskipTests=true
                //   '''
                //  mvn package -Dquarkus.package.uber-jar=true
                sh '''
                        cd ${APP_NAME}
                        mvn -s settings.xml -B clean package -Dquarkus.package.uber-jar=true -DskipTests=true
                   '''
            }
        }
        // Deploy app in dev via  /src/main/ocp/app-template.yaml *** (it must resides in repo as well) . Use tag :dev
        stage('Launch new app in DEV env') {
            steps {
                echo '### Cleaning existing resources in DEV env ###'
                sh '''
                        oc delete all -l app=${APP_NAME} -n ${DEV_PROJECT}
                        oc delete all -l build=${APP_NAME} -n ${DEV_PROJECT}
                        sleep 5
                        oc new-build java:8 --name=${APP_NAME} --binary=true -n ${DEV_PROJECT}
                   '''

                echo '### Creating a new app in DEV env ###'
                script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("bc", "${APP_NAME}").startBuild("--from-file=${APP_NAME}/target/*-runner.jar", "--wait=true", "--follow=true")
                      }
                    }
                }
                // TODO: Create a new OpenShift application based on the TEMPLATE with :dev TAG
                // TODO: Expose the ${APP_NAME} service for external access 
                // TAG ???? 
                // oc new-app --as-deployment-config --name ${APP_NAME}:dev -f ~/app-template.yaml
                sh '''
                    oc project svidalur-dev
                    oc new-app --as-deployment-config --name ${APP_NAME}:latest
                    oc expose svc/${APP_NAME} 
                 '''
                // ?????
                //script {
                    //openshift.withCluster() {
                    // TODO: Tag the ${APP_NAME}:dev image stream in the dev env as ${APP_NAME}:stage in staging
                     //openshift.tag("${DEV_PROJECT}/${APP_NAME}", "${DEV_PROJECT}/${APP_NAME}:dev")
                    //}
                //}
            }
        }

        stage('Wait for deployment in DEV env') {
            //TODO: Watch deployment until pod is in 'Running' state
            steps {
                script {
                    openshift.withCluster() {
                      openshift.withProject( "${DEV_PROJECT}" ) {
                        openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                          return (it.object().status.phase == "Running")
                        }
                      }
                   }
                }
            }
        }

        stage('Promote to Staging Env') {
            steps {
                timeout(time: 60, unit: 'MINUTES') {
                    input message: "Promote to Staging?"
                }
                script {
                    openshift.withCluster() {
                    // TODO: Tag the ${APP_NAME}:dev image stream in the dev env as ${APP_NAME}:stage in staging
                     openshift.tag("${DEV_PROJECT}/${APP_NAME}:dev", "${STAGE_PROJECT}/${APP_NAME}:stage")
                    }
                }
            }
        }

        stage('Deploy to Staging Env') {
            steps {
                echo '### Cleaning existing resources in Staging ###'
                sh '''
                        oc project ${STAGE_PROJECT}
                        oc delete all -l app=${APP_NAME}
                        sleep 5
                   '''

                echo '### Creating a new app in Staging ###'
                // TODO: Create a new app in staging and expose the service
                sh '''
                    oc project ${STAGE_PROJECT}
                    oc new-app --as-deployment-config --name ${APP_NAME} -i ${APP_NAME}:stage
                    oc expose svc/${APP_NAME}
                '''
            }
        }

        stage('Wait for deployment in Staging') {
            steps {
                sh "oc get route ${APP_NAME} -n ${STAGE_PROJECT} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"

                script {
                    routeHost = readFile('routehost').trim()

                    openshift.withCluster() {
                        openshift.withProject( "${STAGE_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                        echo "Deployment to Staging env is complete. Access the API endpoint at the URL http://${routeHost}/movies."
                    }
                }
            }
        }
    }
}